
server:
  port: 8280
    
spring:
  application:
    name: bloop-client

  kafka:
    bootstrap-servers: localhost:19092,localhost:29092,localhost:39092
    properties:   
      bootstrap:
        servers: localhost:19092,localhost:29092,localhost:39092

      schema:
        registry:
          url: http://localhost:8081

      # Best practice for higher availability in Apache Kafka clients prior to 3.0
      session:
        timeout:
          ms: 45000

    producer:
      key-serializer: org.apache.kafka.common.serialization.LongSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      properties:
        schema:
          registry:
            url: http://localhost:8081

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/bloop?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC
    username: bloop
    password: '{cipher}19f1459df8b53ba851021b89f5bbfd435d76fa3f79f7882437a79fe328d6a21c'

    dbcp2:
      test-while-idle: true
      validation-query: select 1    
    
    # Recommended settings
    hikari:
      data-source-properties:
        cachePrepStmts: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        elideSetAutoCommits: true
        maintainTimeStats: false
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        rewriteBatchedStatements: true
        useLocalSessionState: true
        useServerPrepStmts: true
      # The number of connections that Hikari is going to do to MySQL
      maximum-pool-size: 5

  # Only to initialize data when it is an embedded database. Therefore, this will only work when it's on H2. When not using the bootstrap BeerLoader
  # ith Spring Boot 2.5.1 and above, the new SQL initialization properties support detection of embedded datasources for JDBC and R2DBC. By default, SQL database initialization is only performed when using an embedded in-memory database. To always initialize a SQL database, irrespective of its type, set spring.sql.init.mode to always. Similarly, to disable initialization, set spring.sql.init.mode to never
  # https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.5-Release-Notes/99c8a8903c9a0a94e2ca29e520d09aee7ec6bac4
  sql:
    init:
      mode: never

  security:
    oauth2:
      client:
        registration:
          # google registration id
          google:
            client-id: '{cipher}71ded97383aa94705745d4ac9a47f8d36cfc5fad8dc29e392539f2e2dae22a215b66406838ccb526cfd04111d3d8223ae40ba5571ce4cddf11ad44e2d4b21617e78ae9c082451f3d2927741e138f7c03580994339c785d0296b9616d7ac67bad'
            client-secret: '{cipher}0cc2cddd77e4dc0c43938df1c307d897014978f8f1e0aa7d0c1795f408b6efa83c52bfde722eae855896981e6cb1e02924a26e1cb3b86ff7633c3fcf6e578d18'
            scope:
            - email
            - profile

          # facebook registration id
          facebook:
            client-id: '{cipher}c56b42b47254002df1a6dcddcb01d8de80e5981f15f4401dd9b27b9089c6953f'
            client-secret: '{cipher}4b8d97802c93956a76c424b4485ee6d03dffcc278d673579f8b9483669409d044b76ac20827a96bbf044d08685b6fc75af6e0b4486b7b6cc463ad7e49dea3fb9'   
            scope:
            - email
            - public_profile            

  jpa:
    hibernate:
      ddl-auto: update
      naming:
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        '[format_sql]': false
    show-sql: true

    ## Bootstrap
    # Among the changes introduced in 2.5.0, it seems now the data.sql script is executed before Hibernate is initialized
    # Since we are relying on the ORM mechanism (i.e. Hibernate) to create the schema from the entity definition, the database table does not exist at the moment the initialization SQL script is executed.    
    defer-datasource-initialization: true

# Setup the log level of a debug for everything in the package structure for "com.microservices"
logging:
  level:
    com:
      microservices: DEBUG
      zaxxer:
        hikari:
          HikariConfig: DEBUG

    # Enable logging for config troubleshooting
    org:
      hibernate:
        SQL: DEBUG
        type:
          descriptor:
            sql:
              BasicBinder: TRACE

avro:
  topic:
    name: "avro.stream.word.censorship.topic.v1" 


mail-server-config:
  mail-host: "smtp.gmail.com"
  mail-port: 587
  mail-username: "kuvaka.padombo@gmail.com"
  mail-password: '{cipher}054d4131c6d3dd03a2337ffec6f9ef1569217399f12df63196dee1b0906c89a1974e192db2aa0410bb3d6ad428d9431b'
  smtp-auth: "true"
  smtp-secured: "true"
  mail-from: "kuvaka.padombo@gmail.com"
  mail-sender-name: "Bloop Support Team"

  ## Word-censorship-service (Override the application properties found in the main branch in the  main code)
flash:
  bloop: 
    word-censorship-service-host: http://localhost:8180

