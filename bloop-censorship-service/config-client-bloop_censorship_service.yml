server:
  port: 8180

spring:
  application:
    name: bloop-censorship-service

  kafka:
    bootstrap-servers: localhost:19092,localhost:29092,localhost:39092
    properties:   
      bootstrap:
        servers: localhost:19092,localhost:29092,localhost:39092

      schema:
        registry:
          url: http://localhost:8081

      # Best practice for higher availability in Apache Kafka clients prior to 3.0
      session:
        timeout:
          ms: 45000

    consumer:
      group-id: kafka-word-censorship-stream-consumer-id
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      # Define the behaviour of the consumer
      # Tell the Consumer how to read data from tge Kafka Topic
      # That means when we publish data to a Kafka Topic, we are adding to an offset
      # Offset will increase in value as we add data.
      # When we build a consumer from where we want to read the data, do we need to read from the begining of the offset or from the end of the offset
      # earliest - when we build the Consumer for the first time build from the start. Later on it will start from where it left. Read from offset zero
      # latest - read data from kafka from the latest offset. Latest offset can be 10, 100, 995 e.t.c it can be anything
      auto-offset-reset: earliest
      properties:
        schema:
          registry:
            url: http://localhost:8081

        # Tell the consumer that we are going to be reading Avro messages
        specific:
          avro:
            reader: "true"

  datasource:
    driver-class-name: com.microsoft.sqlserver.jdbc.SQLServerDriver
    url: jdbc:sqlserver://localhost:1433;encrypt=true;trustServerCertificate=true
    username: SA
    password: '{cipher}6efc230b01ab6ebd8e1adba709a2e42c6bd8ab094292d65b38459686a9fd0ee46bf3bbdd024b7adb3fb0b097954c5a7b'

    dbcp2:
      test-while-idle: true
      validation-query: select 1
    
    # Recommended settings
    hikari:
      data-source-properties:
        cachePrepStmts: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        elideSetAutoCommits: true
        maintainTimeStats: false
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        rewriteBatchedStatements: true
        useLocalSessionState: true
        useServerPrepStmts: true
      # The number of connections that Hikari is going to do to MySQL
      maximum-pool-size: 5

  # Only to initialize data when it is an embedded database. Therefore, this will only work when it's on H2. When not using the bootstrap BeerLoader
  # ith Spring Boot 2.5.1 and above, the new SQL initialization properties support detection of embedded datasources for JDBC and R2DBC. By default, SQL database initialization is only performed when using an embedded in-memory database. To always initialize a SQL database, irrespective of its type, set spring.sql.init.mode to always. Similarly, to disable initialization, set spring.sql.init.mode to never
  # https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.5-Release-Notes/99c8a8903c9a0a94e2ca29e520d09aee7ec6bac4
  sql:
    init:
      mode: never

  security:
    oauth2:
      client:
        registration:
          # google registration id
          google:
            client-id: '{cipher}7916a83a9a587914ba33f0c982f23d50fae283fd0063b9fd67a9235fd35f7520ef158ed412bd540f5587926ad0c25e177424dce0486189db6d1758c8e6db97c92a0eaa3c9994d8960fc414f3d65c62436f1d90568d8656bcac19dc8f559769e2'
            client-secret: '{cipher}7224f6fb94fc7559516d093bed24394929d8b9a8ad2b86423ef8f4d3d692ea4636f58ba9d24a925169fd70ae2451c1e13b2b1e25a5fe6b935043c388f23c9812'
            scope:
            - email
            - profile

          # facebook registration id
          facebook:
            client-id: '{cipher}c56b42b47254002df1a6dcddcb01d8de80e5981f15f4401dd9b27b9089c6953f'
            client-secret: '{cipher}0207b4593d40e673166eac9f22bf98e1b6e93a0bc152b7e20bedecb6b6c4b3d51927a234e19d8ece0963400d8884e16ba9564f92693a712fd7bcc61ff28a4af2'
            scope:
            - email
            - public_profile 

    user:
      name: BloopCensorshipService
      password: '{cipher}3f0901951fd4301cbfe07c8c8a9d8b9b21743d6196975d57f6673ccbb7599d5c'

  jpa:
    hibernate:
      ddl-auto: update
      naming:
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.SQLServer2012Dialect
        '[format_sql]': false
    show-sql: true

    ## Bootstrap
    # Among the changes introduced in 2.5.0, it seems now the data.sql script is executed before Hibernate is initialized
    # Since we are relying on the ORM mechanism (i.e. Hibernate) to create the schema from the entity definition, the database table does not exist at the moment the initialization SQL script is executed.    
    defer-datasource-initialization: true

# Setup the log level of a debug for everything in the package structure for "com.microservices"
logging:
  level:
    com:
      microservices: DEBUG
      zaxxer:
        hikari:
          HikariConfig: DEBUG

    # Enable logging for config troubleshooting
    org:
      hibernate:
        SQL: DEBUG
        type:
          descriptor:
            sql:
              BasicBinder: TRACE
                        
avro:
  topic:
    name: "avro.stream.word.censorship.topic.v1" 

# Where to find Eureka Server (Including HTTP Basic Access for the Confiogurtion Server to be able to talk to Eureka)
eureka:
  client:
    service-url:
      defaultZone: http://Netflix:Eureka@127.0.0.1:8761/eureka

  instance:
     instance-id: ${spring.application.name}:${instanceId:${random.value}}